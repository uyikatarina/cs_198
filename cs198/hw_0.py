# -*- coding: utf-8 -*-
"""HW 0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18tbw7MIdMPxupLNYYVP0d39TkDbfTptn

# Stat 198: Introduction to Quantitative Finance DeCal

Stat 198 is hosted by [Traders at Berkeley](https://traders.berkeley.edu/). 

Course Website: [https://traders.berkeley.edu/education](https://traders.berkeley.edu/education.html)

# Homework #0

The first homework is to make sure you are up to speed with the tools necessary to complete future homeworks/project.

More information on the necessary tools is available [here](https://docs.google.com/document/d/15RrRBhsXgoGdq_egw0w1DwQrXmHMmzAFdPSdA4bBuj0/edit).

You are free to use any IDE of your choice, but our homework will primarily be in a Jupyter Notebook format.

**Learning Objectives:**

- Package Downloads
- Pandas and NumPy Review
- Data Visualization Review

**Helpful References**
- The Data 100 reference sheet (mainly first page): https://ds100.org/su22/resources/assets/exams/su22/su22_final_reference_sheet.pdf
- Pandas documentation: https://pandas.pydata.org/docs/
- NumPy documentation: https://numpy.org/doc/
- Matplotlib documentation: https://matplotlib.org/stable/index.html

##  Package Downloads
This is to check if you have all the necessary packages installed. Please install numpy, pandas, scikit-learn, statsmodels, and matplotlib. Run all of the commands below to make sure your packages are installed.
"""

!pip show numpy

!pip show pandas

!pip show scikit-learn

!pip show statsmodels

!pip show matplotlib

"""### Questions
These questions are for you to learn about some basics of the above packages. If you aren't familiar with them, search them up!

#### 1.1 What is numpy used for?
NumPy is a library for the Python programming language, used for numerical computing. It provides support for arrays, which are efficient data structures for processing large datasets. NumPy allows for fast and efficient manipulation of arrays, as well as the computation of mathematical operations on arrays, such as linear algebra, statistical operations, and Fourier transforms. The library provides support for integration with other libraries, including SciPy, which is another popular library for scientific computing in Python. In summary, NumPy is widely used in scientific computing and data analysis due to its powerful and efficient numerical operations on arrays.

#### 1.2 What is pandas used for?
Pandas is a library for the Python programming language, used for data analysis and manipulation. It provides fast, flexible, and expressive data structures, designed to make working with structured data (such as tabular data in a spreadsheet or SQL database) quick and easy.

#### 1.3 What is scikit-learn used for?
Scikit-learn is a machine learning library for the Python programming language. It provides a variety of algorithms and tools for tasks such as regression, classification, clustering, dimensionality reduction, model selection, and preprocessing. The library is built on top of other popular libraries such as NumPy and Pandas, making it easy to use and integrate with other scientific computing libraries in the Python ecosystem.

#### 1.4 What is statsmodels used for?
Statsmodels is a library for the Python programming language, used for estimating statistical models and performing statistical tests. It provides a variety of regression, general linear models, time series analysis, and statistical testing tools. It is built on top of other popular libraries such as NumPy, Pandas, and SciPy, making it easy to use and integrate with other scientific computing libraries in the Python ecosystem.

#### 1.5 What is matplotlib used for?
Matplotlib is a plotting library for the Python programming language, used for data visualization. It provides a variety of plotting functions, including line plots, scatter plots, bar plots, histograms, pie charts, box plots, and many others. Matplotlib is highly customizable, allowing users to specify the look and feel of their plots in detail, including colors, labels, markers, and more.

## NumPy Review
Numpy is used for large, multi-dimensional arrays and matrices. They also support a large collection of high-level mathematical functions that can be used on these (including Fourier transforms, if you learned about it in CS170!).

**First, import the package.**
"""

import numpy as np

"""There are a lot of useful functions and ways to use NumPy but we'll only be covering the very basic few. You can explore more [here](https://numpy.org/doc/stable/user/absolute_beginners.html)!

First, we will just cover the basics of NumPy.
"""

# Create an array with a range where the parameters are first number, last number, and step size.
np.arange(2, 20, 3)

# Create an array of length 5 filled with 0s
np.zeros(5)

# Create a numpy array
np.array([1, 2, 3, 4])

# Sort number arrays in ascending order
np.sort([4, 3, 1, 2, 5, 6, 7])

# Concatenate two arrays
np.concatenate(([1, 2, 3, 4], [5, 6, 7, 8]))
np.concatenate(([[1, 2], [3, 4]], [[5, 6]]), axis = 0)

# Finding dimensions of the array
array = np.concatenate(([[1, 2], [3, 4]], [[5, 6]]), axis = 0)
print(f"Dimension of the array: {array.ndim}")
print(f"Total number of elements in the array: {array.size}")
print(f"Shape of the array: {array.shape}")

# Re-shaping Array
a = np.arange(10)
b = a.reshape(5, 2)
b

# Indexing works same as a regular array
a = np.array([1, 2, 3, 4])
print(f"Should print 2: {a[1]}")
print(f"Should print array([2, 3, 4]): {a[1:]}")

"""**Q1. Use a NumPy function other than `np.array` to create an array of length 7 filled with 1s.**"""

import numpy as np
arr=np.ones(7)
arr=arr.astype(int)
print(arr)

"""**Q2. Use a NumPy function other than `np.arange` to create an array of length 10 with values that are spaced linearly from 12 to 202.**"""

import numpy as np
a=np.linspace(12,202,10)
a=a.astype(int)
print(a)

"""**Q3. Use `np.sort` to sort the number array below in descending order**"""

array = [5, 4, 6, 2, 3, 8, 1, 7]

a=np.array([5,4,6,2,3,8,1,7])
sorted_a=np.sort(a)[::-1]
print(sorted_a)

"""**Q4. Use boolean indexing to select numbers that are greater than 3 in the given array.**"""

array = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [7, 8, 9, 10]], dtype=int)

import numpy as np
arr = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [7, 8, 9, 10]], dtype=int)
mask=arr>3
result=arr[mask]
print(result)

"""**Q5. Use a NumPy function to create an array of length 5 with random numbers between 0 and 1.**"""

arr=np.random.rand(5)
print(arr)

"""In the following section, we will take a look at NumPy operations."""

# Add 2 equal size arrays
a = np.array([1, 2, 3])
b = np.ones(3)
print(f"Add arrays a and b: {a + b}")
print(f"Multiply arrays a and a: {a * a}")

# Multiplying a constant to an array performs action on all the elements
print(f"Multiply 2 to array a: {2*a}")

# More array operations
print(f"Max of array a: {a.max()}")
print(f"Min of array a: {a.min()}")
print(f"Sum of array a: {a.sum()}")

# Unique values in array
c = np.array([1, 2, 1, 2, 4, 5, 3])
print(f"Unique values in array c: {np.unique(c)}")

"""**Q1. What is the resulting array of a - b?**"""

[0,1,2]

"""**Q2. What is the value of the sum of the minimum elements of array a and b?**"""

2

"""**Q3. What is the value of the maximum element of the array a + b?**"""

4

"""**Q4. How many unique values are in the array below?**"""

arr = np.round(np.random.random_sample(250), 2)

100

"""## Pandas Review
In this section, you will learn the basics of pandas and numpy. Hopefully you will have a good understanding of how to use these packages by the end!

### DataFrames
DataFrames are basically a table where each column has a specific data type and there's also an index over the columns and rows (multi-index is possible!).

In the future, you will use `pd.read_csv` to read in data.

Here, we will just learn how to create a basic DataFrame.

#### First, let's import the necessary packages.
"""

import pandas as pd

"""#### Creating DataFrame by Columns"""

example_df = pd.DataFrame(
    [ ("Alex", 1, "CS"), ("Ben", 1, "Math"), ("Charlie", 2, "CS"), ("David", 3, "Stats"),
    ]
)
example_df

"""#### Creating DataFrame by Rows"""

example_df = pd.DataFrame(
    data = {
        'Student': ["Alex", "Ben", "Charlie", "David"],
        'Grade': [1, 1, 2, 3],
        'Major': ["CS", "Math", "CS", "Stats"],
    }
)
example_df

"""There are useful tools such as `DataFrame.shape` which tells you the dimension of the DataFrame. More on these can be found [here](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html)

#### Slicing
There are 3 main ways to slice DataFrmaes: `loc`, `iloc`, and `[]`. `loc` takes in two arguments, row labels and column labels. `iloc` is similar to `loc` but it takes in row and column numbers instead of labels. `[]` is the more general operator.

We will just see a brief example of how to use these 3.
"""

# get rows 0 through 2 and columns Student and Major
example_df.loc[0:2, ['Student', 'Major']]

# get rows 0 and 3 and columns 0 through 2 (exclusive)
example_df.iloc[[0, 3], 0:2]

# get rows 0 through 3 (exclusive)
example_df[0:3]

"""#### Q1. Create a sample DataFrame with at least 5 rows and columns and display the original DataFrame"""

import pandas as pd
data = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Emily'],
        'Age': [25, 32, 47, 19, 28],
        'Gender': ['Female', 'Male', 'Male', 'Male', 'Female'],
        'Height (inches)': [64, 71, 68, 70, 65],
        'Weight (lbs)': [128, 185, 165, 150, 132]}
df = pd.DataFrame(data)
print(df)

"""#### Q2. Display the DataFrame above but with just the rows 1 through 3 and columns 2 and 4 (0-indexed)"""

data = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Emily'],
        'Age': [25, 32, 47, 19, 28],
        'Gender': ['Female', 'Male', 'Male', 'Male', 'Female'],
        'Height (inches)': [64, 71, 68, 70, 65],
        'Weight (lbs)': [128, 185, 165, 150, 132]}
df = pd.DataFrame(data)
subset = df.iloc[1:4, [1, 3]]
print(subset)

"""#### Q3. Using the DataFrame you created in Q1, add a new column to it."""

data = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Emily'],
        'Age': [25, 32, 47, 19, 28],
        'Gender': ['Female', 'Male', 'Male', 'Male', 'Female'],
        'Height (inches)': [64, 71, 68, 70, 65],
        'Weight (lbs)': [128, 185, 165, 150, 132]}
df = pd.DataFrame(data)
income = pd.Series([50000, 75000, 100000, 40000, 60000])
df['Income'] = income
# Display the updated DataFrame
print(df)

"""#### Q4. Using the `.drop()` function, drop one of the columns from the DataFrame you created in Q1 and display it."""

data = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Emily'],
        'Age': [25, 32, 47, 19, 28],
        'Gender': ['Female', 'Male', 'Male', 'Male', 'Female'],
        'Height (inches)': [64, 71, 68, 70, 65],
        'Weight (lbs)': [128, 185, 165, 150, 132]}
df = pd.DataFrame(data)
df = df.drop('Height (inches)', axis=1)
print(df)

"""#### Q5. Using the `.rename()` function, rename one of the columns from the DataFrame you created in Q1 and display it."""

#Q5. Using the .rename() function, rename one of the columns from the DataFrame you created in Q1 and display it.
data = {'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Emily'],
        'Age': [25, 32, 47, 19, 28],
        'Gender': ['Female', 'Male', 'Male', 'Male', 'Female'],
        'Height (inches)': [64, 71, 68, 70, 65],
        'Weight (lbs)': [128, 185, 165, 150, 132]}
df = pd.DataFrame(data)
df = df.rename(columns={'Height (inches)': 'Height (cm)'})
print(df)

"""### Filtering Data
When we want to filter our DataFrame for a specific set of data, we can use boolean symbols to do so.

Say from our `example_df` above, we want to only look through students who's grade is at most 2.
"""

example_df[example_df["Grade"] <= 2]

"""Now, let's say we want to filter for students who are CS majors and grade 1."""

example_df[(example_df["Major"] == "CS") & (example_df["Grade"] == 1)]

"""Another cool way of filtering is using the method `groupby`. Let's say we want to know the number of students from each Grade."""

example_df.groupby(["Grade"]).count()

"""#### Q1. Using your DataFrame from the previous question, do some sort of filtering and show your code & output below."""

age_filter = df['Age'] > 30
filtered_df = df[age_filter]
print(filtered_df)

"""----

Now let's download an external dataset. We can use the `read_csv` function from pandas to do so. We demonstrate how we can convert the data in `cars.csv` into a pandas dataframe in order to work with it in python.
"""

from google.colab import files
uploaded=files.upload()
import io
data=pd.read_csv(io.BytesIO(uploaded['cars (1).csv']))
#data = pd.read_csv('./cars(2).csv', delimiter = ';').tail(-1)

"""#### Q2. Display the first 15 rows of `data` using the `head` function."""

print(data.head(15))

"""#### Q3. Display the last 7 rows of `data` using the `tail` function."""

print(data.tail(15))

"""#### Q4. Using the variable `data`, find how many cars have 6 cylinders"""

from google.colab import files
uploaded=files.upload()
import io
data=pd.read_csv(io.BytesIO(uploaded['cars (2).csv']))
print(data.columns)
data[data["Cylinders"] <= 2]

"""#### Q5. Using the variable `data`, find how many cars with 6 cylinders were originated from the US."""

cylinders_filter = data['Cylinders'] == 6
six_cylinder_cars = data[cylinders_filter]
us_filter = six_cylinder_cars['origin'] == 1
us_six_cylinder_cars = six_cylinder_cars[us_filter]

num_us_six_cylinder_cars = len(us_six_cylinder_cars)
print("Number of cars with 6 cylinders from the US:", num_us_six_cylinder_cars)

"""#### Q6. Using the variable `data`, display cars with 6 cylinders, from the US, with weigth less than 3000."""

cylinders_filter = data["Cylinders"] == 6
six_cylinder_cars = data[cylinders_filter]

us_filter = six_cylinder_cars['origin'] == 1
us_six_cylinder_cars = six_cylinder_cars[us_filter]

weight_filter = us_six_cylinder_cars['weight'] < 3000
light_us_six_cylinder_cars = us_six_cylinder_cars[weight_filter]

print(light_us_six_cylinder_cars)

"""## Data Visualization
We can use `matplotlib` for visualization. It plots on to a set of Axes which are associated with a Figure. It will auto-plot onto the current set of Axes or create a new figure/set of default axes. This can be done by using `matplotlib.pyplot` package, which are usually called as `plt`. A subsequent `plt` calls will edit the same set of default-created aces. In addition, after the initial plot, `plt.gca()` will get the current set of axes. 

**Import packages.**
"""

import matplotlib.pyplot as plt

"""We are going to look at some sample plots."""

# Plot using plt
arr = np.arange(25)
plt.plot(arr)
plt.xlabel("Index")
plt.ylabel("Number")
plt.title("Sample Plot")

plt.show()

# Plot using axes
plt.plot(arr)
axes = plt.gca()
axes.set_ylabel("Index (Axes)")
axes.set_xlabel("Number (Axes)")
axes.set_title("Sample Plot (Axes)")

plt.show()

"""---"""

car_data = pd.read_csv('./cars.csv', delimiter = ';').tail(-1)
car_data

"""**Q1. Create a graph with the `Horsepower` on the x-axis and `Acceleration` on the y-axis.** *(If there are too many ticks, cast your data as `float` using `np.asarray()`. )* """

x = np.asarray(data['Horsepower'], dtype=float)
y = np.asarray(data['Acceleration'], dtype=float)

plt.scatter(x, y)
plt.xlabel("Horsepower")
plt.ylabel("Acceleration")
plt.title("Scatter Plot of Horsepower vs Acceleration")
plt.show()

"""Your graph should look something like this: 

![Q1 Image](https://cdn.discordapp.com/attachments/564268123545403394/1070609023419826206/image.png)

**Q2.Create a histogram based on the values of the column `Cylinders`.**
"""

import pandas as pd
import matplotlib.pyplot as plt
# Create a histogram of the 'Cylinders' column
plt.hist(data['Cylinders'])

# Add labels and title
plt.xlabel('Number of Cylinders')
plt.ylabel('Number of Cars')
plt.title('Distribution of Cylinder Counts in Cars')

# Show the plot
plt.show()

"""Again, your graph should look something like this:

![Q2 Image](attachment:image.png)

**Q3. Create a graph with the `Weight` on the x-axis and `Acceleration` on the y-axis.**
"""

import pandas as pd
import matplotlib.pyplot as plt
plt.hist(data['Cylinders'])
# Add labels and title
plt.xlabel('Number of Cylinders')
plt.ylabel('Number of Cars')
plt.title('Distribution of Cylinder Counts in Cars')
# Show the plot
plt.show()

"""Your graph should look like this: 

![Q3 Image](https://cdn.discordapp.com/attachments/564268123545403394/1070609271747772446/image.png)

## Using YFinance Data

Now, let's explore stock data using `yfinance`.

**Q1.Import `yfinance` and get the S&P 500, APPL, MSFT, and GOOG data. The granularity should be minute level data for the past 30 days.**
"""

!pip install yfinance
import yfinance as yf
import datetime

start_date = datetime.datetime.today() - datetime.timedelta(30)
end_date = datetime.datetime.today()

# Download data for S&P 500 index
spy = yf.download('^GSPC', start=start_date, end=end_date, interval='1d')

# Download data for Apple Inc.
aapl = yf.download('AAPL', start=start_date, end=end_date, interval='1d')

# Download data for Microsoft Corporation
msft = yf.download('MSFT', start=start_date, end=end_date, interval='1d')

# Download data for Alphabet Inc. (Google)
goog = yf.download('GOOG', start=start_date, end=end_date, interval='1d')

"""**Q2.Now, try plotting the price of S&P 500 for the past 30 days.**"""

import yfinance as yf
import matplotlib.pyplot as plt
import datetime

start_date = datetime.datetime.now() - datetime.timedelta(days=30)
end_date = datetime.datetime.now()

sp500 = yf.download('^GSPC', start=start_date, end=end_date, interval='1d')

plt.plot(sp500['Close'])
plt.title('S&P 500 Price for the past 30 days')
plt.xlabel('Date')
plt.ylabel('Price ($)')
plt.show()

"""Note down any observations in this cell:

**Q3.Now, plot the returns (a.k.a percent change) of S&P 500 for the past 30 days.**
"""

import yfinance as yf
import matplotlib.pyplot as plt

# Get data for S&P 500 for the past 30 days
spy = yf.Ticker("^GSPC")
df = spy.history(period="30d")

# Calculate the daily returns
returns = df["Close"].pct_change()

# Plot the returns
plt.plot(returns)
plt.title("S&P 500 Returns (30 Days)")
plt.ylabel("Percent Change")
plt.show()

"""**Q4.Plot the returns of APPL, MSFT, GOOG as well.**"""

import yfinance as yf
import pandas as pd

start_date = '2022-12-31'
end_date = '2023-02-14'

tickers = ['AAPL', 'MSFT', 'GOOG', '^GSPC']

data = yf.download(tickers, start=start_date, end=end_date, interval='1d', group_by='ticker')

df_close = pd.DataFrame()

for ticker in tickers:
    df_close[ticker] = data[ticker]['Close']

returns = df_close.pct_change()

cov_matrix = returns.cov()

print(cov_matrix)

"""**Q5.Run seaborn.pairplot on the returns of SPY, APPL, MSFT, and GOOG. (You have to import the package)**"""

import yfinance as yf
import seaborn as sns

symbols = ['SPY', 'AAPL', 'MSFT', 'GOOG']

data = yf.download(symbols, start="2022-01-01", end="2022-02-14")['Adj Close']
returns = data.pct_change()

returns.dropna(inplace=True)

sns.pairplot(returns)

"""**Q6.Print the correlations across those 4.**"""



"""Now we have learned a lot of stocks are very correlated to the market at large!

## Submission

Submit your code to github under the "[Coding HW] Homework 0" Assignment. This homework is due February 12th by Midnight.
"""